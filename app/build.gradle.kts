/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.12.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.kotlin.jvm)

    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use the Kotlin JUnit 5 integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")

    // Use the JUnit 5 integration.
    testImplementation(libs.junit.jupiter.engine)
    testImplementation("io.mockk:mockk:1.13.17")

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation(libs.guava)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "com.kura.server.StartServer"
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.named<Jar>("jar") {
    manifest {
        attributes["Main-Class"] = application.mainClass.get()
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from(configurations.runtimeClasspath.get().map { if (it.isDirectory) it else zipTree(it) })
}

// Task to run the KuraSQL client application
tasks.register<JavaExec>("runClient") {
    group = "application"
    description = "Run KuraDB SQL client application"
    mainClass = "sample.kura_client.KuraSQLClient"
    classpath = sourceSets["main"].runtimeClasspath
    standardInput = System.`in` // Pass standard input to the application
}

// Task to create an executable JAR file for the client
tasks.register<Jar>("clientJar") {
    group = "build"
    description = "Assembles a jar archive containing the KuraDB SQL client application."
    archiveBaseName.set("kura-sql-client")
    archiveClassifier.set("")

    manifest {
        attributes(
            "Main-Class" to "sample.kura_client.KuraSQLClient",
            "Implementation-Title" to "KuraDB SQL Client",
            "Implementation-Version" to project.version
        )
    }

    // Include main source code and resources
    from(sourceSets["main"].output)

    // Include dependencies
    dependsOn(configurations.runtimeClasspath)
    from({
        configurations.runtimeClasspath.get().filter { it.name.endsWith("jar") }.map { zipTree(it) }
    })

    // Exclude duplicate files
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
